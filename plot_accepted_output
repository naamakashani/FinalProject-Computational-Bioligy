
import pandas as pd
import seaborn as sns
import os

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np


def process_no_filter(file_path):

    df = pd.read_csv(file_path, delimiter="\t")
    # Perform operations or analysis on the data frame
    df.rename(columns={'#gene1': 'gene1'}, inplace=True)
    # check if df[gene1] has ',' and split and duplicate the row with the same data
    # for index, row in df.iterrows():
    #     if ',' in row['gene1']:
    # Splitting rows with multiple genes in both columns
    df['gene1'] = df['gene1'].str.split(',')
    df['gene2'] = df['gene2'].str.split(',')

# Exploding rows with multiple genes in both columns
    df = df.explode('gene1').explode('gene2')

# Resetting the index
    df = df.reset_index(drop=True)

    df['gene1'] = df['gene1'].str.replace(r'\(\d+\)', '')

    df['gene2'] = df['gene2'].str.replace(r'\(\d+\)', '')

    df['fusion_name'] = df['gene1'] + "--" + df['gene2']
    file_name = os.path.basename(file_path)
    if "discarded" in file_name:
        df['discarded'] = "yes"
    else:
        df['discarded'] = "no"
    df['sample_id'] = file_name.split(".fusions")[0]
    # filter out where site1 or site 2 are intron
    df = df[~df['site1'].isin(['intron'])
            & ~df['site2'].isin(['intron'])]
    chr1 = df['breakpoint1'].str.extract(r'(chr(\w+))')[0]
    chr2 = df['breakpoint2'].str.extract(r'(chr(\w+))')[0]
    df['chr'] = chr1
    # define the start as breakpint1 take what after the  :
    df['start'] = df['breakpoint1'].str.split(
        ':').str[1].astype(int)
    df['end'] = df['breakpoint2'].str.split(
        ':').str[1].astype(int)
    df['strand'] = df['strand1(gene/fusion)'].str.split(
        '/').str[1]
    for index, row in df.iterrows():
        if '-' in row['strand']:
            df.loc[index, ['start', 'end']
                   ] = df.loc[index, ['end', 'start']].values
    df['diff'] = df['end'] - df['start']
    df['diff'] = df['diff'].abs()
    return df


def process_file(file_path):
    df = pd.read_csv(file_path, delimiter="\t")
    # Perform operations or analysis on the data frame
    df.rename(columns={'#gene1': 'gene1'}, inplace=True)
    df['gene1'] = df['gene1'].str.split(',')
    df['gene2'] = df['gene2'].str.split(',')
    df['multiple_genes'] = (df['gene1'].str.len()) * (df['gene2'].str.len())
    df = df.explode('gene1').explode('gene2')

    df = df.reset_index(drop=True)

    df['gene1'] = df['gene1'].str.replace(r'\(\d+\)', '')

    df['gene2'] = df['gene2'].str.replace(r'\(\d+\)', '')

    df['fusion_name'] = df['gene1'] + "--" + df['gene2']
    file_name = os.path.basename(file_path)
    if "discarded" in file_name:
        df['discarded'] = "yes"
    else:
        df['discarded'] = "no"
    df['sample_id'] = file_name.split(".fusions")[0]
    # filter out where site1 or site 2 are intron
    df = df[~df['site1'].isin(['intron'])
            & ~df['site2'].isin(['intron'])]
    # filter only the fusiond where site1 or site2 are CDS and the other is CDS or intergenic
    # df = df[(df['site1'].str.contains('CDS') & df['site2'].str.contains('CDS')) |
    #         (df['site1'].str.contains(('3\'UTR')) & df['site2'].str.contains('intergenic') & (df['type'].str.contains('deletion') | df['type'].str.contains('duplication')))]
    # df = df[((df['site1'].str.contains('CDS') & (df['site2'].str.contains('CDS') | df['site2'].str.contains('intergenic'))) | (
    #     (df['site2'].str.contains('CDS') & (df['site1'].str.contains('CDS') | df['site1'].str.contains('intergenic')))))]

    # df = df[(df['site1'].str.contains('CDS') & (df['site2'].str.contains('CDS'))) | (df['site1'].str.contains(('3\'UTR'))  &
    #     df['site2'].str.contains('intergenic'))]
    chr1 = df['breakpoint1'].str.extract(r'(chr(\w+))')[0]
    chr2 = df['breakpoint2'].str.extract(r'(chr(\w+))')[0]
    df['chr'] = chr1
    # filter out the fusions of diffrenet chomosomes.
    filtered_df = df[chr1 == chr2]
    # filter rows where gene1 and gene2 the same and both sites are intergenic
    filtered_df = filtered_df[(filtered_df['gene1'] != filtered_df['gene2']) | (
        (filtered_df['site1'] != 'intergenic') & (filtered_df['site2'] == 'intergenic'))]

    # filtered_df= filtered_df[~(filtered_df['gene1']==filtered_df['gene2']) & (filtered_df['site1']=='intergenic') & (filtered_df['site2']=='intergenic')]

    # define the start as breakpint1 take what after the  :
    filtered_df['start'] = filtered_df['breakpoint1'].str.split(
        ':').str[1].astype(int)
    filtered_df['end'] = filtered_df['breakpoint2'].str.split(
        ':').str[1].astype(int)
    filtered_df['strand'] = filtered_df['strand1(gene/fusion)'].str.split(
        '/').str[1]
    # for index, row in filtered_df.iterrows():
    #     if '-' in row['strand']:
    #         filtered_df.loc[index, ['start', 'end']
    #                         ] = filtered_df.loc[index, ['end', 'start']].values
    # if the start is bigger than the end switch them
    filtered_df['start'], filtered_df['end'] = np.where(filtered_df['start'] > filtered_df['end'], [
        filtered_df['end'], filtered_df['start']], [filtered_df['start'], filtered_df['end']])
    filtered_df['diff'] = filtered_df['end'] - filtered_df['start']
    filtered_df['diff'] = filtered_df['diff'].abs()
    # filter out all the diff that are grader than 0.5MB
    filtered_df = filtered_df[filtered_df['diff'] < 500000]
    # filter out all the fusions that are translocation or inversion
    filtered_df = filtered_df[~filtered_df['type'].str.contains(
        'translocation|inversion')]
    if 'discarded' in file_name:
        filtered_df = filtered_df[~filtered_df['filters'].str.contains(
            'blacklist')]
    filtered_df = filtered_df.drop_duplicates(
        subset=['chr', 'start', 'end', 'strand'])
    # drop rowd where chr is M
    filtered_df = filtered_df[~filtered_df['chr'].str.contains('M')]
    filtered_df = filter_out_gtex_Star(filtered_df)

    return filtered_df


def filter_out_gtex_Star(data):
    # filter out the fusions that are in gtex
    gtex_fusion = []
    with open('/private/projects/kidney_rtt/bed_arriba_output/fusion_star.txt') as f:
       # add each fusion name to the list
        for line in f:
            gtex_fusion.append(line.split("\t")[0])

    filtered_df = data[~data['fusion_name'].isin(gtex_fusion)]
    return filtered_df


def plot_conf_all_samples(all_samples):
    fig, ax = plt.subplots()
    diff_low = []
    diff_medium = []
    diff_high = []
    for sample in all_samples:
        diff_low.append(sample[sample['confidence'] == 'low']['diff'])
        diff_medium.append(sample[sample['confidence'] == 'medium']['diff'])
        diff_high.append(sample[sample['confidence'] == 'high']['diff'])

    low = pd.concat(diff_low)
    medium = pd.concat(diff_medium)
    high = pd.concat(diff_high)

    if not low.empty:
        plt.hist(low, bins=50, alpha=0.3,
                 color='black', label='Low Confidence')
    if not medium.empty:
        plt.hist(medium, bins=50, color='red',
                 alpha=0.3, label='Medium Confidence')
    if not high.empty:
        plt.hist(high, bins=50, color='blue',
                 alpha=0.3, label='High Confidence')

    ax.set_xlabel("Length of Fusion")
    ax.set_ylabel("Number of Fusions")
    ax.set_title("Frequency Distribution of Fusion Lengths")

    # Add legend with labels for each color
    handles, labels = ax.get_legend_handles_labels()
    ax.legend(handles, labels)

    fig.savefig(
        '/private/projects/kidney_rtt/all_plots/plot_not_discarded_new_filters/conf.png')


def plot_conf_all_samples_HM(all_samples):
    fig, ax = plt.subplots()
    diff_medium = []
    diff_high = []
    for sample in all_samples:
        diff_medium.append(sample[sample['confidence'] == 'medium']['diff'])
        diff_high.append(sample[sample['confidence'] == 'high']['diff'])

    medium = pd.concat(diff_medium)
    high = pd.concat(diff_high)
    medium = medium.values
    high = high.values
    medium = [x for x in medium if x >= 0]
    high = [x for x in high if x >= 0]

    sns.kdeplot(medium, color='red', label='Medium Confidence',
                fill=True, alpha=0.3)
    sns.kdeplot(high, color='blue', label='High Confidence',
                fill=True, alpha=0.3)
    ax.set_xlabel("Length of Fusion")
    ax.set_ylabel("Density")
    ax.set_title("Density Plot: Fusion Lengths by Confidence Level")

    # Add legend
    ax.legend()

    fig.savefig(
        '/private/projects/kidney_rtt/all_plots/plot_not_discarded_new_filters/conf_HM.png')


# def count_fusion_for_top_samples(data_list):
#     fusion_counts = {}

#     for df in data_list:
#         if len(df) == 0:
#             continue
#         else:
#             sample_id = df['sample_id'].iloc[0]
#             fusion_counts[sample_id] = fusion_counts.get(
#                 sample_id, 0) + len(df)

#     sorted_fusion_counts = sorted(fusion_counts.items(),
#                                   key=lambda x: x[1], reverse=True)

#     top_genes = [gene for gene, count in sorted_fusion_counts[:20]]
#     top_counts = [count for gene, count in sorted_fusion_counts[:20]]

#     fig, ax = plt.subplots(figsize=(10, 12))

#     # Create bar plot with sorted values
#     ax.bar(top_genes, top_counts, color='g')
#     ax.set_xlabel("Sample ID")
#     ax.set_ylabel("Number of Fusions")
#     ax.set_title("Number of Fusions in Confidance High or Medium for Each Sample")

#     plt.xticks(rotation=90)
#     plt.tight_layout()
#     plt.show()
#     fig.savefig(
#         '/private/projects/kidney_rtt/all_plots/plot_not_discarded_new_filters/count_fusion_for_top_sample_HM.png')


def count_fusion_for_sample(data_list):
    fusion_counts = {}

    for df in data_list:
        if len(df) == 0:
            continue
        else:
            sample_id = df['sample_id'].iloc[0]
            fusion_counts[sample_id] = fusion_counts.get(
                sample_id, 0) + len(df)

    fusion_counts_values = list(fusion_counts.values())

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.hist(fusion_counts_values, bins=10, color='darkblue', width=1)
    ax.set_xlabel("Fusion Counts")
    ax.set_ylabel("Number of samples")
    ax.set_title("Frequency Distribution of Fusion Counts")
    plt.tight_layout()
    plt.show()
    fig.savefig(
        '/private/projects/kidney_rtt/all_plots/plot_not_discarded_new_filters/count_fusion_for_sample.png')


def count_fusion_for_sample_HM(data_list):
    fusion_counts = {}

    for df in data_list:
        if len(df) == 0:
            continue
        else:
            sample_id = df['sample_id'].iloc[0]
            fusion_counts[sample_id] = fusion_counts.get(
                sample_id, 0) + len(df)

    fusion_counts_values = list(fusion_counts.values())

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.hist(fusion_counts_values, bins=10, color='darkblue', width=1)
    ax.set_xlabel("Fusion Counts")
    ax.set_ylabel("Number of samples")
    ax.set_title(
        "Frequency Distribution of Fusion Counts in Confidence High or Medium")
    plt.tight_layout()
    plt.show()
    fig.savefig(
        '/private/projects/kidney_rtt/all_plots/plot_not_discarded_new_filters/count_fusion_for_sample_HM.png')


def count_fusion_for_gene_HM(data_list):
    fusion_counts = {}

    # Count the occurrences of each fusion name across the list of DataFrames
    for df in data_list:
        fusion_names = df['fusion_name'].tolist()

        for fusion_name in fusion_names:
            fusion_counts[fusion_name] = fusion_counts.get(fusion_name, 0) + 1

    fusion_counts_values = list(fusion_counts.values())

    # Create a histogram plot of the fusion counts
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.hist(fusion_counts_values, bins=8, color='darkblue', width=1)
    ax.set_xlabel("Fusion Name Count")
    ax.set_ylabel("Frequency")
    ax.set_title(
        "Frequency of Samples Fusions Counts in Confidence High or Medium")
    fig.savefig(
        '/private/projects/kidney_rtt/all_plots/plot_not_discarded_new_filters/count_fusion_for_gene_HM.png')


def count_fusion_for_gene(data_list):
    fusion_counts = {}

    # Count the occurrences of each fusion name across the list of DataFrames
    for df in data_list:
        fusion_names = df['fusion_name'].tolist()

        for fusion_name in fusion_names:
            fusion_counts[fusion_name] = fusion_counts.get(fusion_name, 0) + 1

    # Extract the fusion names and counts
    fusion_names = list(fusion_counts.keys())
    fusion_counts_values = list(fusion_counts.values())

    # Create a histogram plot of the fusion counts
    fig, ax = plt.subplots(figsize=(14, 10))
    ax.hist(fusion_counts_values, bins=50, color='darkblue')
    ax.set_xlabel("Fusion Name Count")
    ax.set_ylabel("Frequency")
    ax.set_title("Frequency of Counts for Fusions")
    fig.savefig(
        '/private/projects/kidney_rtt/all_plots/plot_not_discarded_new_filters/count_fusion_for_gene.png')


def count_fusion_for_gene_top(data_list):
    fig, ax = plt.subplots(figsize=(14, 8))
    fusion_counts = {}

    # Initialize dictionaries to store fusion counts in different categories
    high_counts = {}
    medium_counts = {}
    low_counts = {}

    # Iterate over the data frames
    for df in data_list:
        fusion_names = df['fusion_name']
        categories = ['high', 'medium', 'low']

        # Count the occurrences of each fusion name and categorize them
        for fusion_name, category in zip(fusion_names, categories):
            if category == 'high':
                high_counts[fusion_name] = high_counts.get(fusion_name, 0) + 1
            elif category == 'medium':
                medium_counts[fusion_name] = medium_counts.get(
                    fusion_name, 0) + 1
            elif category == 'low':
                low_counts[fusion_name] = low_counts.get(fusion_name, 0) + 1

    # Combine the counts from different categories into a single dictionary
    for fusion_name in set(fusion_counts.keys()) | set(high_counts.keys()) | set(medium_counts.keys()) | set(low_counts.keys()):
        fusion_counts[fusion_name] = {
            'high': high_counts.get(fusion_name, 0),
            'medium': medium_counts.get(fusion_name, 0),
            'low': low_counts.get(fusion_name, 0)
        }

    # Sort the fusion counts based on the total count
    sorted_counts = sorted(fusion_counts.items(),
                           key=lambda x: sum(x[1].values()), reverse=True)

    # Extract the top 100 fusion names and their counts
    top_fusions = [fusion for fusion, count in sorted_counts[:100]]
    top_high_counts = [count['high'] for fusion, count in sorted_counts[:100]]
    top_medium_counts = [count['medium']
                         for fusion, count in sorted_counts[:100]]
    top_low_counts = [count['low'] for fusion, count in sorted_counts[:100]]

    # Create stacked bar plot
    x = np.arange(len(top_fusions))
    width = 0.35

    ax.bar(x, top_high_counts, width, label='High', color='red')
    ax.bar(x, top_medium_counts, width, bottom=top_high_counts,
           label='Medium', color='orange')
    ax.bar(x, top_low_counts, width, bottom=np.array(top_high_counts) +
           np.array(top_medium_counts), label='Low', color='darkblue')

    ax.set_xlabel("Fusion Name")
    ax.set_ylabel("Count")
    ax.set_title("Frequency Distribution of Top Fusions")
    ax.set_xticks(x)
    ax.set_xticklabels(top_fusions, fontsize=9, rotation=90)
    ax.legend()
    fig.tight_layout()

    fig.savefig(
        '/private/projects/kidney_rtt/all_plots/plot_not_discarded_new_filters/count_fusion_for_top_gene.png')


def run_not_discarded():
    gf_call_list = []
    # Directory path containing the files
    directory = "/private/projects/kidney_rtt/arriba_outputs/"
    # Iterate over each file in the directory
    for filename in os.listdir(directory):
        file_path = os.path.join(directory, filename)
        # Check if the item in the directory is a file
        if os.path.isfile(file_path) and "discarded" not in file_path:
            gf_call_one = process_file(file_path)
            gf_call_list.append(gf_call_one)

    # save only the fusions that are high or medium confidence
    filtered = []
    for one_df in gf_call_list:
        filter_df = one_df[one_df['confidence'].isin(['high', 'medium'])]
        filtered.append(filter_df)
    count_fusion_for_gene_top(gf_call_list)
    count_fusion_for_gene(gf_call_list)
    plot_conf_all_samples(gf_call_list)
    count_fusion_for_sample(gf_call_list)

    count_fusion_for_gene_HM(filtered)
    count_fusion_for_sample_HM(filtered)
    plot_conf_all_samples_HM(filtered)


if __name__ == "__main__":
    run_not_discarded()
